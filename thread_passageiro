struct passageiro
// flag esta_onibus -- indica se estah no onibus (inicializada em 0)
// flag chegou -- indica se ja chegou no ponto -- (inicializada em 0)
// id_passageiro - chave unica do passageiro
// origem - de onde ele sai
// destino - onde ele chega
// is-bloqueado - nao conseguiu entrar na fila
// is-role- determina se ele esta no role da cidade
// tempo_role
// id_onibus_esta - indica qual onibus o passageiro estah embarcado

void do_desembarque(passageiro_t pa, ponto p, onibus o)
{
	if (origem == p && chegou == 1) {
		kill_passageiro();
	} else if (destino == p && chegou == 0) {
		chegou = 1;
		reitirar_busao(p, o);
		//insere_heap_role(pa, p);
		sleep(random);			/*TODO: aqui a thread _ponto_ ira dormir. e _nao_ a thread passageiro*/
		insere_fila_bloqueados();
	}
}

main_passageiro(void)
{
	ponto_t src = (rand()%MAX_PONTOS)
	ponto_t dst = (rand()%MAX_PONTOS);
	while (src == dst) {
		ponto_t src = (rand()%MAX_PONTOS)
		ponto_t dst = (rand()%MAX_PONTOS);
	}
	
	request_lugar_fila();
	while (!first(fila_passageiros())) {
		wait_var_cond()			// todos dormem enquanto nao forem os primeiros da fila
	}

	/*NOTE: talvez inverter a ordem desse while com o do while anterior??*/
	while (give_onibus() != NULL) {
		wait_var_cond(); 		// todos dormem (inclusive o primeiro da fila) enquanto nao houver um onibus
	}

	while (!chegou)
		wait_var_cond();

	do_desembarque();

	while (!do_embarque()) {
		// do nothing();
	}
	wait_var_cond()				// dorme dentro do onibus ate chegar de volta a sua origem

	while (!chegou)
		wait_var_cond();
	kill_passageiro();
}
