struct busao
// nro_assentos
// id-onibus
// id_ponto_parado (-1 se nao esta parado em nenhum ponto)
// passageiro_t assentos[nro_assentos]
// assento_disponivel - armazena a quantidade de assentos disponiveis
// ready_to_go


int is_ocupado(id_ponto)
{
}

int get_self(pthread_t self)
{
	int i;
	for (i = 0; i < NRO_THREAD_ONIBUS; i++) {
		if (pthread_equals(self, pthread_self()))
			return i;
	}
	return -1;
}

/*checa se o busao tah parado em algum ponto*/
int is_parado_ponto()
{
	if (id_ponto_parado == -1)
		return nao esta parado;
	else
		return id_ponto_parado
}

int is_lotado(onibus o)
{
	return ((assento_disponivel == 0) ? 1 : 0);
}


void enter_busao(passageiro p, onibus o)
{
	if (is_lotado(o))
		return;


	int i;
	for (i = 0; i < nro_assentos; i++) {
		if (assentos[i] == NULL) {
			assentos[i] = p;
			assentos_disponivel--;
			return;
		}
	}
}

retirar_busao(passageiro p, onibus o)
{
	int i;
	for (i = 0; i < o->nro_assentos; i++) {
		if (assenntos[i] == p) {
			assentos[i] = NULL;
			assentos_disponiveis++;
			return;
		}
	}
}

main_onibus(void)
{
	// colocando o onibus no ponto
	ponto_t src = (rand()%MAX_PONTOS);
	while (is_ocupado()) {
		src = (rand()%MAX_PONTOS);
	}

	while (!todo_onibus_ponto)
		sleep();


	/*condição de inicialização - ninguem vai precisar descer*/
	while (!is_lotado() && !empty(fila_ponto_onibus)) {
		sobe_passageiros();

	/*TODO: code here*/
	while (tiver passageiros circulando) {
		sleep(random);

		while (select_prox_ponto() == EBUSY);

		pthread_cond_signal();				// acordar passageriros que estao dormindo no busao

		while (tiver passageiros que forem desembarcar)
			wait_var_cond();			// pthread_cond_wait(&cond_queue_full, &item_queue_cond_lock);

		while (!is_lotado) {
			reitrar_fila_passageiros();		// atualizar ois dois TADS fila do ponto		
		}

		
	}	
}
